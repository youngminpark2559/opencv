// I note explanations from lecture by JH Kim 
// Lecture reference:
// https://www.youtube.com/playlist?list=PLvX6vpRszMkye9Zj16aG9J063A9rBfBj2

// 004_point_processing_005_of_008_video_frame_subtraction.cpp
// https://www.youtube.com/watch?v=5mg5RvsYoME&index=29&list=PLvX6vpRszMkye9Zj16aG9J063A9rBfBj2

// =================================================================
// Practical code
// =================================================================
// http://study.marearts.com/2017/02/cvlecture-example-code-video-subtraction.html
// http://cvlecture.marearts.com/2017/02/opencv-4-5.html

#include "opencv2/opencv.hpp"
#include "opencv2/cuda.hpp"
#include "opencv2\cudaarithm.hpp"
#include <iostream>

using namespace std;
using namespace cv;

int main(int, char)
{
    Mat frame;
    Mat old_frame;
    Mat sub_frame;
    //Mat absdiff_frame;

    // You will capture video with 2nd camera
    // c stream1(1): VideoCapture type variable, 2nd camera
    VideoCapture stream1(1);

    // You check if video device has been initialized well
    if (!stream1.isOpened()) { 
        cout << "cannot open camera 1";
    }

    while (1)
    {   
        // You read one fram from stream1,
        // if there is no frame, you perform break to be out of while loop
        if (!(stream1.read(frame)))
            break;
        // old_frame has no video at initial time
        // So, you check if old_frame really doesn't have video, then, if so,
        if (old_frame.empty())
        {   
            // you clone current frame and assign it into old_frame
            old_frame = frame.clone();
            // You perform continue to make code flow to the top of while loop, 
            // then, from top of while loop, you will get new frame
            continue;
        }

        // You will subtract current frame by old frame,
        // and assign result into sub_frame
        subtract(old_frame, frame, sub_frame);
        //absdiff(old_frame, frame, absdiff_frame);

        // You show roaded frame through cam1
        imshow("frame", frame);
        // You show subtracted frame
        imshow("sub_frame", sub_frame);
        //imshow("absdiff_frame", absdiff_frame);

        // Since processing is finished, you assign current frame into old_frame
        // To subtract continuously coming current frame by fixed background image generated by first frame,
        // you should fix old_frame
        // old_frame = frame.clone();

        // When computer is displaying video frame,
        // if client presses specific key,
        // you perform break to be out of while loop
        if (waitKey(5) >= 0)
            break;
    }
    return 0;
}
